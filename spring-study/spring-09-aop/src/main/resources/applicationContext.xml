<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.lh.service.UserServiceImpl"/>
    <bean id="beforeLog" class="com.lh.log.BeforeLog"/>
    <bean id="afterLog" class="com.lh.log.AfterLog"/>


    <!--方式一：使用原生Spring API接口 (例：log包)-->
    <!--配置aop: 需要导入aop的约束-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;切入点: 对应在哪个地方执行Spring的方法； execution(要执行的位置 * * *) &ndash;&gt;-->
        <!--<aop:pointcut id="pointcut" expression="execution(* com.lh.service.UserServiceImpl.*(..))"/>-->

        <!--&lt;!&ndash;执行环绕增强&ndash;&gt;-->
        <!--<aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
        <!--<aop:advisor advice-ref="beforeLog" pointcut-ref="pointcut"/>-->
    <!--</aop:config>-->


    <!--方式二：自定义类-->
    <!--<bean id="diy" class="com.lh.diy.DiyPointCut"/>-->

    <!--<aop:config>-->
        <!--&lt;!&ndash;自定义切面, ref: 要引用的类&ndash;&gt;-->
        <!--<aop:aspect ref="diy">-->
            <!--&lt;!&ndash;切入点; execution表达式查看 Aspectj切入点语法定义&ndash;&gt;-->
            <!--<aop:pointcut id="point" expression="execution(* com.lh.service.UserServiceImpl.*(..))"/>-->
            <!--&lt;!&ndash;通知 (即为类中的方法)&ndash;&gt;-->
            <!--<aop:before method="before" pointcut-ref="point"/>-->
            <!--<aop:after method="after" pointcut-ref="point"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->


    <!--方式三：注解-->
    <bean id="annotationPointCut" class="com.lh.diy.AnnotationPointCut"/>
    <!--开启注解支持 JDK(默认)proxy-target-class="false" ； cglib（proxy-target-class="true"）-->
    <aop:aspectj-autoproxy />

</beans>